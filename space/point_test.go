package space

import (
	"testing"
)

func TestPoint_BufferInMeter(t *testing.T) {
	wantGeometry := Polygon{{
		{110.00117265646337, 40.00000000000001},{110.00115012419823, 39.99982474877957},
		{110.00108339330515, 39.999656231941024},{110.00097502821495, 39.99950092556494},
		{110.00082919333724, 39.999364798097254},{110.00065149302459, 39.99925308096896},
		{110.00044875620038, 39.99917006753527},{110.00022877392705, 39.99911894806501},
		{110.00000000000001, 39.99910168712361},{109.99977122607295, 39.99911894806501},
		{109.99955124379962, 39.99917006753527},{109.9993485069754, 39.99925308096896},
		{109.99917080666276, 39.999364798097254},{109.99902497178505, 39.99950092556494},
		{109.99891660669483, 39.999656231941024},{109.99884987580177, 39.99982474877957},
		{109.99882734353663, 40.00000000000001},{109.99884987580177, 40.00017525077067},
		{109.99891660669483, 40.00034376632828},{109.99902497178505, 40.00049907078736},
		{109.99917080666276, 40.000635195993794},{109.9993485069754, 40.00074691086084},
		{109.99955124379962, 40.00082992237753},{109.99977122607295, 40.00088104056688},
		{110.00000000000001, 40.00089830105848},{110.00022877392705, 40.00088104056688},
		{110.00044875620038, 40.00082992237753},{110.00065149302459, 40.00074691086084},
		{110.00082919333724, 40.000635195993794},{110.00097502821495, 40.00049907078736},
		{110.00108339330515, 40.00034376632828},{110.00115012419823, 40.00017525077067},
		{110.00117265646337, 40.00000000000001},
	}}
	type args struct {
		width    float64
		quadsegs int
	}
	tests := []struct {
		name         string
		p            Point
		args         args
		want Geometry
	}{
		{name: "Point BufferInMeter", p: Point{110, 40}, args: args{width: 100, quadsegs: 8}, want: wantGeometry},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			gotGeometry := tt.p.BufferInMeter(tt.args.width, tt.args.quadsegs)
			isEqual := gotGeometry.EqualsExact(tt.want, 0.000001)
			if !isEqual {
				t.Errorf("Point.BufferInMeter() = %v, want %v", gotGeometry, tt.want)
			}
		})
	}
}
